{
	"name": "ProcessNewRows",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "IncCopyCustomersTbl",
						"type": "DatasetReference"
					},
					"name": "CustomerTbl"
				},
				{
					"dataset": {
						"referenceName": "DimCustomerTbl",
						"type": "DatasetReference"
					},
					"name": "ExistTbl"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimCustomerTbl",
						"type": "DatasetReference"
					},
					"name": "InsertNewRows"
				},
				{
					"dataset": {
						"referenceName": "DimCustomerTbl",
						"type": "DatasetReference"
					},
					"name": "UpdateSCDRows"
				},
				{
					"dataset": {
						"referenceName": "DimCustomerTbl",
						"type": "DatasetReference"
					},
					"name": "UpdateInforRows"
				}
			],
			"transformations": [
				{
					"name": "CalculateNewColumns"
				},
				{
					"name": "CalculateAgeGroup"
				},
				{
					"name": "IfNewCustomer"
				},
				{
					"name": "TypeOfChange"
				},
				{
					"name": "LookupExistTbl"
				},
				{
					"name": "UnionWithType2SCD"
				},
				{
					"name": "IfAlreadyUpdated"
				},
				{
					"name": "RenamedExistTbl"
				},
				{
					"name": "DerivedNewSCDColumns"
				},
				{
					"name": "UpdateSCD"
				},
				{
					"name": "UpdateInfoOnly"
				},
				{
					"name": "UnionWithAlreadyUpdated"
				}
			],
			"script": "source(output(\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tDateOfBirth as date,\n\t\tCity as string,\n\t\tProvince as string,\n\t\tPostalCode as string,\n\t\t{InsertDate/Time} as timestamp,\n\t\t{LastUpdateDate/Time} as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerTbl\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tDateOfBirth as date,\n\t\tCity as string,\n\t\tProvince as string,\n\t\tPostalCode as string,\n\t\tAge as integer,\n\t\tCurrentAgeGroup as string,\n\t\tForwardStortationArea as string,\n\t\tDimensionFromDate as date,\n\t\tDimensionThroughDate as date,\n\t\tCurrentRecordFlag as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistTbl\nCustomerTbl derive(Age = iif(month(currentDate())*100+dayOfMonth(currentDate()) < month(DateOfBirth)*100+dayOfMonth(DateOfBirth),\r\nyear(currentDate()) - year(DateOfBirth) - 1, \r\nyear(currentDate()) - year(DateOfBirth)),\n\t\tDimensionFromDate = currentDate(),\n\t\tDimensionThroughDate = toDate('2999-01-01'),\n\t\tCurrentRecordFlag = 'Y',\n\t\tForwardStortationArea = substring(PostalCode, 1, 3)) ~> CalculateNewColumns\nCalculateNewColumns derive(CurrentAgeGroup = concat(toString(floor(Age/10)), '0-', toString(floor(Age/10)), '9')) ~> CalculateAgeGroup\nCalculateAgeGroup split({InsertDate/Time} == {LastUpdateDate/Time},\n\tdisjoint: false) ~> IfNewCustomer@(IsNewCustomers, NotNewCustomers)\nLookupExistTbl split((CurrentAgeGroup != ExistCurrentAgeGroup) || (ForwardStortationArea != ExistForwardStortationArea),\n\tdisjoint: false) ~> TypeOfChange@(Type2Change, Type1Change)\nIfNewCustomer@NotNewCustomers, RenamedExistTbl lookup(CustomerID == ExistCustomerID,\n\tmultiple: false,\n\tpickup: 'last',\n\tasc(ExistCustomerKey, true),\n\tbroadcast: 'auto')~> LookupExistTbl\nIfNewCustomer@IsNewCustomers, IfAlreadyUpdated@NotUpdated union(byName: true)~> UnionWithType2SCD\nTypeOfChange@Type2Change split(DimensionFromDate == ExistDimensionFromDate,\n\tdisjoint: false) ~> IfAlreadyUpdated@(AlreadyUpdated, NotUpdated)\nExistTbl select(mapColumn(\n\t\tExistCustomerKey = CustomerKey,\n\t\tExistCustomerID = CustomerID,\n\t\tExistFirstName = FirstName,\n\t\tExistLastName = LastName,\n\t\tExistDateOfBirth = DateOfBirth,\n\t\tExistCity = City,\n\t\tExistProvince = Province,\n\t\tExistPostalCode = PostalCode,\n\t\tExistAge = Age,\n\t\tExistCurrentAgeGroup = CurrentAgeGroup,\n\t\tExistForwardStortationArea = ForwardStortationArea,\n\t\tExistDimensionFromDate = DimensionFromDate,\n\t\tExistDimensionThroughDate = DimensionThroughDate,\n\t\tExistCurrentRecordFlag = CurrentRecordFlag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenamedExistTbl\nIfAlreadyUpdated@NotUpdated derive(NewDimensionThroughDate = currentDate()-1,\n\t\tNewCurrentRecordFlag = 'N') ~> DerivedNewSCDColumns\nDerivedNewSCDColumns alterRow(updateIf(1==1)) ~> UpdateSCD\nUnionWithAlreadyUpdated alterRow(updateIf(1==1)) ~> UpdateInfoOnly\nTypeOfChange@Type1Change, IfAlreadyUpdated@AlreadyUpdated union(byName: true)~> UnionWithAlreadyUpdated\nUnionWithType2SCD sink(input(\n\t\tCustomerKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tDateOfBirth as date,\n\t\tCity as string,\n\t\tProvince as string,\n\t\tPostalCode as string,\n\t\tAge as integer,\n\t\tCurrentAgeGroup as string,\n\t\tForwardStortationArea as string,\n\t\tDimensionFromDate as date,\n\t\tDimensionThroughDate as date,\n\t\tCurrentRecordFlag as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCustomerID,\n\t\tFirstName,\n\t\tLastName,\n\t\tDateOfBirth,\n\t\tCity,\n\t\tProvince,\n\t\tPostalCode,\n\t\tAge,\n\t\tCurrentAgeGroup,\n\t\tForwardStortationArea,\n\t\tDimensionFromDate,\n\t\tDimensionThroughDate,\n\t\tCurrentRecordFlag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertNewRows\nUpdateSCD sink(input(\n\t\tCustomerKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tDateOfBirth as date,\n\t\tCity as string,\n\t\tProvince as string,\n\t\tPostalCode as string,\n\t\tAge as integer,\n\t\tCurrentAgeGroup as string,\n\t\tForwardStortationArea as string,\n\t\tDimensionFromDate as date,\n\t\tDimensionThroughDate as date,\n\t\tCurrentRecordFlag as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['CustomerKey'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tDimensionThroughDate = NewDimensionThroughDate,\n\t\tCurrentRecordFlag = NewCurrentRecordFlag,\n\t\tCustomerKey = ExistCustomerKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UpdateSCDRows\nUpdateInfoOnly sink(input(\n\t\tCustomerKey as integer,\n\t\tCustomerID as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tDateOfBirth as date,\n\t\tCity as string,\n\t\tProvince as string,\n\t\tPostalCode as string,\n\t\tAge as integer,\n\t\tCurrentAgeGroup as string,\n\t\tForwardStortationArea as string,\n\t\tDimensionFromDate as date,\n\t\tDimensionThroughDate as date,\n\t\tCurrentRecordFlag as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['CustomerKey'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tFirstName,\n\t\tLastName,\n\t\tDateOfBirth,\n\t\tCity,\n\t\tProvince,\n\t\tPostalCode,\n\t\tAge,\n\t\tCurrentAgeGroup,\n\t\tForwardStortationArea,\n\t\tCustomerKey = ExistCustomerKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UpdateInforRows"
		}
	}
}